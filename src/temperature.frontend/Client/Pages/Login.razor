@page "/authentication/login"
@using temperature.frontend.Shared
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<h3>Login</h3>
<div class="col-md-6 offset-md-3 mt-5">
    <div class="card">
        <h4 class="card-header">Login</h4>
        <div class="card-body">
            <EditForm Model="@loginModel" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="loginModel.Username" id="username" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Username)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="loginModel.Password" type="password" id="password" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>
                <button disabled="@loading" class="btn btn-primary" id="login_button">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private bool loading;
    private LoginModel loginModel = new LoginModel();

    async Task OnValidSubmit()
    {
        var result = await Http.PostAsJsonAsync("api/auth/token", loginModel);
        var token = (await result.Content.ReadFromJsonAsync<System.Text.Json.JsonElement>()).GetProperty("AccessToken").GetString();

        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", token);
        await AuthStateProvider.GetAuthenticationStateAsync();
    }
}
